<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xue.dao.StudentDAO">
  <resultMap id="BaseResultMap" type="com.xue.bean.Student">
    <id column="sid" jdbcType="INTEGER" property="sid" />
    <result column="sName" jdbcType="VARCHAR" property="sname" />
    <result column="scid" jdbcType="INTEGER" property="scid" />
    <result column="sHobby" jdbcType="VARCHAR" property="shobby" />
    <result column="cid" jdbcType="INTEGER" property="cid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    sid, sName, scid, sHobby, cid
  </sql>
  <select id="selectByExample" parameterType="com.xue.bean.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where sid = #{sid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student
    where sid = #{sid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xue.bean.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xue.bean.Student">
    insert into student (sid, sName, scid, 
      sHobby, cid)
    values (#{sid,jdbcType=INTEGER}, #{sname,jdbcType=VARCHAR}, #{scid,jdbcType=INTEGER}, 
      #{shobby,jdbcType=VARCHAR}, #{cid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xue.bean.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sid != null">
        sid,
      </if>
      <if test="sname != null">
        sName,
      </if>
      <if test="scid != null">
        scid,
      </if>
      <if test="shobby != null">
        sHobby,
      </if>
      <if test="cid != null">
        cid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sid != null">
        #{sid,jdbcType=INTEGER},
      </if>
      <if test="sname != null">
        #{sname,jdbcType=VARCHAR},
      </if>
      <if test="scid != null">
        #{scid,jdbcType=INTEGER},
      </if>
      <if test="shobby != null">
        #{shobby,jdbcType=VARCHAR},
      </if>
      <if test="cid != null">
        #{cid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xue.bean.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.sid != null">
        sid = #{record.sid,jdbcType=INTEGER},
      </if>
      <if test="record.sname != null">
        sName = #{record.sname,jdbcType=VARCHAR},
      </if>
      <if test="record.scid != null">
        scid = #{record.scid,jdbcType=INTEGER},
      </if>
      <if test="record.shobby != null">
        sHobby = #{record.shobby,jdbcType=VARCHAR},
      </if>
      <if test="record.cid != null">
        cid = #{record.cid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set sid = #{record.sid,jdbcType=INTEGER},
      sName = #{record.sname,jdbcType=VARCHAR},
      scid = #{record.scid,jdbcType=INTEGER},
      sHobby = #{record.shobby,jdbcType=VARCHAR},
      cid = #{record.cid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xue.bean.Student">
    update student
    <set>
      <if test="sname != null">
        sName = #{sname,jdbcType=VARCHAR},
      </if>
      <if test="scid != null">
        scid = #{scid,jdbcType=INTEGER},
      </if>
      <if test="shobby != null">
        sHobby = #{shobby,jdbcType=VARCHAR},
      </if>
      <if test="cid != null">
        cid = #{cid,jdbcType=INTEGER},
      </if>
    </set>
    where sid = #{sid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xue.bean.Student">
    update student
    set sName = #{sname,jdbcType=VARCHAR},
      scid = #{scid,jdbcType=INTEGER},
      sHobby = #{shobby,jdbcType=VARCHAR},
      cid = #{cid,jdbcType=INTEGER}
    where sid = #{sid,jdbcType=INTEGER}
  </update>


  <!--多对多的查询，根据人查他的角色-->
  <resultMap id="selectStudentBynsnameRM" type="com.xue.bean.Student" extends="BaseResultMap">
    <collection property="banweiList" ofType="com.xue.bean.Banwei">
      <id column="BanId" jdbcType="INTEGER" property="banid" />
      <result column="Banname" jdbcType="VARCHAR" property="banname" />
      <result column="sid" jdbcType="INTEGER" property="sid" />
    </collection>
  </resultMap>
  <select id="selectStudentBynsname" resultMap="selectStudentBynsnameRM" parameterType="string">
    select * from student s join banwei b on s.sid=b.sid
    join studentbanji sb on s.sid=sb.sId
    where s.sName=#{sName};
      </select>

</mapper>